#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug  4 16:33:10 2019

@author: valler
"""

from __future__ import division
import pandas as pd
from pandas import DataFrame
from math import sqrt
import numpy as np
import matplotlib.pyplot as plt
import math
from sklearn.metrics import mean_squared_error
#=============

def rmse(actual,predict):#data1 is actual data
    rms = sqrt(mean_squared_error(actual,predict))
    return rms;  

 
def modeleva(model,actual,predict):
    import  statsmodels.tools.eval_measures as ev
    
    if model =='mse':
        res=ev.mse(actual,predict).mean()
    elif model == 'rmse':
        res =ev.rmse(actual,predict).mean()
    elif model == 'MAPE':
        x1 = np.asanyarray(actual)
        x2 = np.asanyarray(predict)
        res = np.mean(np.abs((x1 - x2) / x1))
        res=100*res/len(actual)
    else:
        res = 'no such mean'
    
    return res;

#=============
    
#----------------
columnx='PCECC96'#Real Personal Consumption Expenditures (Billions of Chained 2012 Dollars)
#'USSTHPI' House price,All-Transactions House Price Index for the United States (Index 1980 Q1=100),
#starts from 1975-3-1,df[64]
columny='GDPC1'#GDP,Real Gross Domestic Product, 3 Decimal (Billions of Chained 2012 Dollars)
columnz='CPIAUCSL'#CPI,Consumer Price Index for All Urban Consumers: All Items (Index 1982-84=100)
columnn='PPIACO' #PPI,Producer Price Index for All Commodities (Index 1982=100)
#----------------
a =[columnx+' Fore',columny+' Fore',columnz+' Fore',columnn+' Fore']# for forecast data
b =[columnx,columny,columnz,columnn]#for original data
c =['MAPE','rmse']
d =[0.5,0.6,0.7]# for HWES


file_fore='HWES_Foresult_QD.csv'
m=1

info_fore= pd.read_csv(file_fore, parse_dates=True, index_col=0)


j=0
tmp=[]
tmp1=[]
tmp2=[]
while j<2:#for model
    

    if m==0:
        i=0
        while i <4:

            print('This is for %s:'%b[i])
            actual=info_fore[b[i]]
            predict=info_fore[a[i]]
            res=modeleva(c[j],actual,predict)
            print('The result of %s is: %s'%(c[j],res))
            if j==0:
                tmp.append(res)
            else:
                tmp1.append(res)
            i=i+1 
    else:
        k=0
        while k<3:
            i=0
            while i<4:
                print()
                print('This is for %s:(a=%s)'%(b[i],d[k]))
                colname= a[i]+' a='+repr(d[k])
                predict=info_fore[colname]
                actual=info_fore[b[i]]
                res=modeleva(c[j],actual,predict)
                print('The result of %s is: %s'%(c[j],res))
                print()
                i=i+1 
                if j==0:
                    tmp.append(res)
                else:
                    tmp1.append(res)  

            k=k+1 
            
    j=j+1


'''
if m==0:

    dn=DataFrame(tmp)
    dn.columns=[c[0]]
    dn1=DataFrame(tmp1)
    dn1.columns=[c[1]]
    combb=pd.concat([dn,dn1],axis=1)
    combb.to_csv('ModelEva_HWES.csv')

tm=[]
if m==1:
    i=0
    while i <2:
        if i==0:

            dn=DataFrame(tmp[0,3],index=b)
            dn1=DataFrame(tmp[4,7],index=b)
            dn2=DataFrame(tmp[8,11],index=b)
            dn.columns=[c[0]]
            dn1.columns=[c[0]]
            dn2.columns=[c[0]]
            combMAPE=pd.concat([dn,dn1,dn2],axis=1)
        else:
            dnn=DataFrame(tmp1[0,3],index=b)
            dnn1=DataFrame(tmp1[4,7],index=b)
            dnn2=DataFrame(tmp1[8,11],index=b)
            dnn.columns=[c[1]]
            dnn1.columns=[c[1]]
            dnn2.columns=[c[1]]
            combrmse=pd.concat([dnn,dnn1,dnn2],axis=1)  
        i=i+1
'''
