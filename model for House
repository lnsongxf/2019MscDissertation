#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 20 11:57:37 2019

@author: valler
"""

from __future__ import division
import pandas as pd
from pandas import Series, DataFrame

from numpy.random import randn
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.vector_ar.var_model import VAR
from statsmodels.tsa.stattools import adfuller as ADF
from statsmodels.tsa.stattools import kpss as KPSS

info_all = pd.read_csv('2019-06.csv', parse_dates=True, index_col=0)
info_hos = info_all[['HOUST']]

#print(info_hos.info())
#print(info_hos)
# graph 1&2
#info_hos.ix['1959-01-01':'2001-01-01'].plot()
#info_hos.rolling(10).mean().plot()
hos_train = info_hos['1959-01-01':'2001-01-01']

#Exponentially weighted windows ewm
#graph 3
'''
fig, axes = plt.subplots(nrows=2, ncols=1, sharex=True, sharey=True,
                         figsize=(12, 7))


ma = hos_train.rolling(20, min_periods=10).mean()
ewma =hos_train.ewm(span=20).mean()


hos_train.plot(style='k-', ax=axes[0])
ma.plot(style='k--', ax=axes[0])
hos_train.plot(style='k-', ax=axes[1])
ewma.plot(style='k--', ax=axes[1])
axes[0].set_title('Simple MA')
axes[1].set_title('Exponentially-weighted MA')
#-------------------------------------------------


#acf & pacf 
#graph 4&5
from statsmodels.graphics.tsaplots import plot_acf
plot_acf(hos_train).show()
from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(hos_train).show() #pacf
#-------------------------------------------------
'''
#exam the stationarity 
#print( ADF(hos_train[u'HOUST']))
#print( KPSS(hos_train[u'HOUST']))

#graph6 difference
'''
Dhos_train= hos_train.diff().dropna()
Dhos_train.columns = [u'DHOUST']
#Dhos_train.plot()
#print( KPSS(Dhos_train[u'DHOUST']))
'''
#-------------------------------------------------

#white noise test
'''
from statsmodels.stats.diagnostic import acorr_ljungbox
print(acorr_ljungbox(hos_train, lags=1))
'''
#-------------------------------------------------

#ARMA
'''
from statsmodels.tsa.arima_model import ARIMA

#decide p,q

pmax = 15 #suppose p,q < length/10
qmax = 10 #suppose p,q < length/10
bic_matrix = [] #bic matrix
for p in range(pmax+1):
  tmp = []
  for q in range(qmax+1):
    try: 
      tmp.append(ARIMA(hos_train, (p,0,q)).fit().bic)
    except:
      tmp.append(None)
  bic_matrix.append(tmp)

bic_matrix = pd.DataFrame(bic_matrix) #find the minimum 

p,q = bic_matrix.stack().idxmin() #先用stack展平，然后用idxmin找出最小值位置。
print(u'BIC最小的p值和q值为：%s、%s' %(p,q)) 


model = ARIMA(hos_train,(p,0,q)).fit() #ARIMA(0, 1, 1) model
print('modelsummary!!') #model report
print(model.summary())
print(model.forecast(1))
'''
#-------------------------------------------------

#VAR
'''
from statsmodels.tsa.vector_ar.var_model import VAR
info_var = info_all[['HOUST','HOUSTNE']]

#optlag = VAR(info_var).select_order(trend='c')
model = VAR(info_var).fit(maxlags=10,method='ols', ic='aic', trend='c')
print(model.summary())
print(model.forecast(model.y,1))
'''
#-------------------------------------------------

#HWES
from statsmodels.tsa.holtwinters import ExponentialSmoothing
model = ExponentialSmoothing(hos_train).fit()
forec = model.predict(len(hos_train), len(hos_train))
print(forec)
