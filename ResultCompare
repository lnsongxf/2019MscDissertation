#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep  3 18:01:43 2019

@author: valler
"""
import pandas as pd
from pandas import DataFrame
import matplotlib.pyplot as plt
import numpy as np

info_all = pd.read_csv('EVA.csv', parse_dates=True, index_col=0)

#----------------
columnx='PCECC96'#Real Personal Consumption Expenditures (Billions of Chained 2012 Dollars)
#'USSTHPI' House price,All-Transactions House Price Index for the United States (Index 1980 Q1=100),
#starts from 1975-3-1,df[64]
columny='GDPC1'#GDP,Real Gross Domestic Product, 3 Decimal (Billions of Chained 2012 Dollars)
columnz='CPIAUCSL'#CPI,Consumer Price Index for All Urban Consumers: All Items (Index 1982-84=100)
columnn='PPIACO' #PPI,Producer Price Index for All Commodities (Index 1982=100)
#----------------
a=[columnx,columny,columnz,columnn]
b=['FAVAR','VARMA','VAR','ARMA','ES','SMA','BMA','WAIC']
c=['_MAPE','_RMSE']
d=['_aic','_bic']
#-----------------

FAVAR1=info_all[b[0]+c[0]+d[0]] #FAVAR_MAPE_aic
FAVAR2=info_all[b[0]+c[1]+d[0]] #FAVAR_rmse_aic
FAVAR3=info_all[b[0]+c[0]+d[1]] #FAVAR_MAPE_bic
FAVAR4=info_all[b[0]+c[1]+d[1]] #FAVAR_rmse_bic

VARMA1=info_all[b[1]+c[0]+d[0]] #MAPE_aic
VARMA2=info_all[b[1]+c[1]+d[0]] #rmse_aic
VARMA3=info_all[b[1]+c[0]+d[1]] #MAPE_bic
VARMA4=info_all[b[1]+c[1]+d[1]] #rmse_bic

VAR1=info_all[b[2]+c[0]+d[0]] #MAPE_aic
VAR2=info_all[b[2]+c[1]+d[0]] #rmse_aic
VAR3=info_all[b[2]+c[0]+d[1]] #MAPE_bic
VAR4=info_all[b[2]+c[1]+d[1]] #rmse_bic

ARMA1=info_all[b[3]+c[0]+d[0]] #MAPE_aic
ARMA2=info_all[b[3]+c[1]+d[0]] #rmse_aic
ARMA3=info_all[b[3]+c[0]+d[1]] #MAPE_bic
ARMA4=info_all[b[3]+c[1]+d[1]] #rmse_bic

ES1=info_all[b[4]+c[0]+d[0]] #MAPE_aic
ES2=info_all[b[4]+c[1]+d[0]] #rmse_aic
ES3=info_all[b[4]+c[0]+d[1]] #MAPE_bic
ES4=info_all[b[4]+c[1]+d[1]] #rmse_bic

SMA1=info_all[b[5]+c[0]+'_A'] #MAPE_with ARMA model
SMA2=info_all[b[5]+c[1]+'_A']  #rmse_with ARMA model
SMA3=info_all[b[5]+c[0]] #MAPE
SMA4=info_all[b[5]+c[1]]  #rmse

BMA1=info_all[b[6]+c[0]+'_0.5']
BMA2=info_all[b[6]+c[1]+'_0.5']
BMA3=info_all[b[6]+c[0]+'_0.0001']
BMA4=info_all[b[6]+c[1]+'_0.0001']
BMA5=info_all[b[6]+c[0]+'_A']
BMA6=info_all[b[6]+c[1]+'_A']

WAIC1=info_all[b[7]+c[0]+'_0.5'] #MAPE
WAIC2=info_all[b[7]+c[1]+'_0.5']
WAIC3=info_all[b[7]+c[0]+'_0.0001']#MAPE
WAIC4=info_all[b[7]+c[1]+'_0.0001']
WAIC5=info_all[b[7]+c[0]+'_A']#MAPE
WAIC6=info_all[b[7]+c[1]+'_A']

#-----------------

def plo(dt1,dt2,dt3,dt4,num,ylabel): # num is the controller, if dt4==3 ->only 3 dataframes
    if num==3:
        WAIC=pd.concat([dt1,dt2,dt3],axis=1)
    elif num==2:
        WAIC=pd.concat([dt1,dt2],axis=1)
    else:
        WAIC=pd.concat([dt1,dt2,dt3,dt4],axis=1)
        
    ax=WAIC.plot.bar()
    ax.set_ylabel(ylabel)
    ax.tick_params(axis='x', labelrotation=0)
    ax.set_axisbelow(True)
    ax.minorticks_on()
    ax.grid(which='major')
    ax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')

def plo2(dt1,dt2,dt3,dt4,dt5,ylabel):    
    WAIC=pd.concat([dt1,dt2,dt3,dt4,dt5],axis=1)
    
    ax=WAIC.plot.bar()  
    ax.set_ylabel(ylabel)
    ax.tick_params(axis='x', labelrotation=0)
    ax.set_axisbelow(True)
    ax.minorticks_on()
    ax.grid(which='major')
    ax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
    
def plo3(dt1,dt2,dt3,dt4,dt5,dt6,ylabel):    
    WAIC=pd.concat([dt1,dt2,dt3,dt4,dt5,dt6],axis=1)
    
    ax=WAIC.plot.bar()    
    ax.set_ylabel(ylabel)
    ax.tick_params(axis='x', labelrotation=0)
    ax.set_axisbelow(True)
    ax.minorticks_on()
    ax.grid(which='major')
    ax.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
    ax.legend(prop={'size': 8})
#-------------------

   
plo(FAVAR1,FAVAR3,ARMA1,ARMA3,2,'MAPE')
plo(FAVAR2,FAVAR4,ARMA2,ARMA4,2,'RMSE')
plo(FAVAR2,FAVAR4,ARMA2,ARMA4,2)


plo(VARMA1,VARMA3,ARMA1,ARMA3,4,'MAPE')
plo(VARMA2,VARMA4,ARMA2,ARMA4,4)
plo(VARMA1,VARMA3,ARMA1,ARMA3,2,'MAPE')
plo(VARMA2,VARMA4,ARMA2,ARMA4,2,'RMSE')

plo(VAR1,VAR3,ARMA1,ARMA3,4,'MAPE')
plo(VAR2,VAR4,ARMA2,ARMA4,4)
plo(VAR1,VAR3,ARMA1,ARMA3,2,'MAPE')
plo(VAR2,VAR4,ARMA2,ARMA4,2,'RMSE')

plo(ARMA1,ARMA3,ARMA3,ARMA4,2,'MAPE')
plo(ARMA2,ARMA4,ARMA3,ARMA4,2,'RMSE')

plo(ES2,ES4,ARMA2,ARMA4,2,'RMSE')
plo(ES1,ES3,ARMA1,ARMA3,2,'MAPE')
plo(ES1,ARMA1,ES1,ES1,2)



plo(SMA4,ARMA2,SMA2,ARMA1,2)

plo(BMA1,BMA3,BMA5,ARMA1,2,'MAPE')
plo(BMA2,BMA4,BMA6,ARMA2,2,'RMSE') #RMSE

plo(WAIC1,WAIC3,WAIC5,ARMA1,2,'MAPE')
plo(WAIC2,WAIC4,WAIC6,ARMA2,2,'RMSE') #RMSE



plo2(FAVAR1,VARMA1,VAR1,ES1,ARMA1,'MAPE')
plo2(FAVAR2,VARMA2,VAR2,ES2,ARMA2,'RMSE')
plo2(FAVAR3,VARMA3,VAR3,ES3,ARMA3,'MAPE')
plo2(FAVAR4,VARMA4,VAR4,ES4,ARMA4,'RMSE')


plo(SMA3,BMA3,WAIC3,ARMA1,4,'MAPE')
plo(SMA4,BMA4,WAIC4,ARMA2,4,'RMSE')

plo3(SMA3,SMA1,BMA3,BMA5,WAIC3,WAIC5,'MAPE')
plo3(SMA4,SMA2,BMA4,BMA6,WAIC4,WAIC6,'RMSE')

#


''' 



#1

FAVAR1.columns=['FAVAR_MAPE_aic']
ARMA1.colums=['ARMA_MAPE_aic']
ts=pd.concat([FAVAR1,ARMA1],axis=1)
ax1=ts.plot.scatter(x='ARMA_MAPE_aic',y='FAVAR_MAPE_aic')
x=np.arange(0,6)
plt.plot(x,x)




def comp(org1,org2,org3,org4): #compare the results within models
    i=0
    res1=[]
    res2=[]
    res3=[]
    res4=[] 
    
    while i<4:
        res1.append(org1[a[i]]/ARMA1[a[i]])
        res2.append(org2[a[i]]/ARMA2[a[i]])
        res3.append(org3[a[i]]/ARMA3[a[i]])
        res4.append(org4[a[i]]/ARMA4[a[i]])
        i=i+1
        
    return res1,res2,res3,res4;

def comp_ic(org1,org2):
    i=0
    res1=[]
    
    while i<4:
        res1.append(org1[a[i]]/org2[a[i]])
        i=i+1

#single model compare with ARMA
e,f,g,h=comp(FAVAR1,FAVAR2,FAVAR3,FAVAR4)
i,j,k,l=comp(VARMA1,VARMA2,VARMA3,VARMA4)
m,n,o,p=comp(VAR1,VAR2,VAR3,VAR4)
q,r,s,t=comp(ES1,ES2,ES3,ES4)

#2
e=DataFrame(e,index=a)
e.columns=['FAVAR_MAPE_aic']

f=DataFrame(f,index=a)
f.columns=['FAVAR_RMSE_aic']

g=DataFrame(g,index=a)
g.columns=['FAVAR_MAPE_bic']

h=DataFrame(h,index=a)
h.columns=['FAVAR_RMSE_bic']

stan=DataFrame([1,1,1,1],index=a)
stan.columns=['ARMA']

FAVAR=pd.concat([e,f,g,h],axis=1)
ax=FAVAR.plot.bar(rot=0)##['FAVAR_MAPE_aic','FAVAR_RMSE_aic','FAVAR_MAPE_bic','FAVAR_RMSE_bic']
ax.set_ylabel('Model/ARMA')
ax.set_xlabel('Indicators')
'''



#within model compare IC

#Model average compare with ARMA
 






    